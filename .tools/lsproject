#!/usr/bin/env python3
import os

# Folders to ignore
ignore = [".mypy", ".git", ".pytest", "__pycache__", ".egg-info", ".cache",
          ".mypy_cache"]

# Filenames to ignore
fignore = [".mod", ".7z", ".png", ".jpg", ".pdf", ".xlsx", ".dat", ".aux",
           ".tmp"]

# Try to list the current git project's files
cwd = os.getcwd()

levels = ["/"]
for part in cwd.split("/"):
    if part:
        levels.append(levels[-1] + part + "/")
levels = levels[::-1]

# Now detect gitrepo
root = cwd
git = False
for level in levels:
    target = level + ".git"
    if os.path.exists(target) and not os.path.isfile(target):
        root = level
        git = True
        break

root += "/"

# Check subfolders
home = os.path.expanduser("~/")
subhome = root.startswith(home) and root != home
# make a list of directories and files
if not (git or subhome):
    # for git and folders in the users home directory, give full subtree,
    # Otherwise just give current directory
    walk = ((cwd, None, 
             [f for f in os.listdir(".") if not os.path.isdir(f)]),)
else:
    walk = os.walk(root)


nroot = len(root)
sup = cwd[nroot-1:]

outputs = []

for dname, _, files in walk:
    dname = dname[nroot:]

    skip = False
    for ig in ignore:
        if ig in dname:
            skip = True
            break
    if skip:
        continue

    if dname.startswith(sup):
        back = ""
        fwd = dname[len(sup):]
    else:
        i = 0
        stop = min(len(dname), len(sup)) - 1
        while i < stop and dname[i] == sup[i]:
            i += 1
        # now wind backwards to the last slash
        while i > 0 and dname[i] != "/":
            i -= 1
        back = "../" * (1 + sup[i:].count('/'))
        fwd = dname[i:]
    # print(dname, " == ", back + fwd)
    if fwd.startswith("/"):
        fwd = fwd[1:]
    path = back + fwd
    if len(path) and not path.endswith("/"):
        path += "/"

    for f in files:
        for g in fignore:
            if g in f:
                break
        else:
            ffname = (path + f)
            priority = ffname.count("../") + ffname.count("/") + \
                f.startswith(".")
            outputs.append((priority, ffname))

v = [n for p, n in sorted(outputs)]
for ff in v:
    print(ff)
