#!/usr/bin/env python3
import os

# Folders to ignore
ignore = [".mypy", ".git", ".pytest", "__pycache__", ".egg-info", ".cache",
        ".mypy_cache", ".venv", ".ipynb_checkpoints", "__old__",
          'node_modules', 'tmp']

# Filenames to ignore
fignore = [".mod", ".7z", ".png", ".jpg", ".pdf", ".xlsx", ".dat", ".aux",
        ".tmp", 'scored_', 'params_', 'metrics_', '.joblib']


def main():
    home = os.path.expanduser("~/")

    # Try to list the current git project's files
    cwd = os.getcwd() + "/"
    inrepo, root = git_root(cwd)

    # If we arent in git, but we are in our home folder
    subhome = cwd.startswith(home) and cwd != home

    if inrepo or subhome:
        # walk entire tree
        # walk -> path, subfolders, subfiles
        walk = os.walk(root)
    else:
        # Otherwise just list current directory
        walk = ((cwd, [],
                [f for f in os.listdir(".") if not os.path.isdir(f)]),)

    # trim the root path off the current path
    outputs = []

    for path, _, files in walk:

        # Turn into path from cwd
        relpath = relative(path, cwd)

        # Check if we should skip entire folder
        if skip(path, ignore):
            continue

        # For each file in folder
        for f in files:

            # Check if we should skip
            if skip(f, fignore):
                continue

            # Combine into relative filename
            ffname = relpath + f

            # Assign a sorting priority
            # priority = ffname.count("../") + ffname.count("/") + \
            #     f.startswith(".")
            # outputs.append((priority, ffname))
            priority = "" if f.endswith(".py") else "Z"*10
            # push parent folder to end
            priority = priority + relpath.replace('../', 'ZZ/')
            outputs.append((priority, ffname))

    v = [n for p, n in sorted(outputs)]

    for ff in v:
        print(ff)


def git_root(cwd):

    levels = ["/"]
    for part in cwd.split("/"):
        if part:
            levels.append(levels[-1] + part + "/")
    levels = levels[::-1]

    # If git repo, set the root to repo root
    for level in levels:
        target = level + ".git"
        if os.path.exists(target) and not os.path.isfile(target):
            return True, level

    return False, cwd


def skip(path, ignorev):
    # Apply the ignores by filename
    skip = False
    for ig in ignorev:
        if ig in path:
            skip = True
            break
    return skip


def relative(path, cwd):
    # similar to relpath, but doesnt do weird stuff with dots.
    start = len(os.path.commonpath((path, cwd))) + 1  # include slash
    fwd = path[start:]
    back = "../" * cwd[start:].count('/')  # it doesnt matter what they are
    path = back + fwd

    # Put a trailing slash
    if len(path) and not path.endswith("/"):
        path += "/"

    return path


if __name__ == "__main__":
    main()
